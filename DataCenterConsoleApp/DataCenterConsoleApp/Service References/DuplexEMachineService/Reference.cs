//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataCenterConsoleApp.DuplexEMachineService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DuplexEMachineService.IService", CallbackContract=typeof(DataCenterConsoleApp.DuplexEMachineService.IServiceCallback))]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/NormalFunction")]
        void NormalFunction();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/NormalFunction")]
        System.Threading.Tasks.Task NormalFunctionAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/InsertData")]
        void InsertData(string macineKey);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/InsertData")]
        System.Threading.Tasks.Task InsertDataAsync(string macineKey);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/NotifyServer")]
        void NotifyServer(string clientAddress);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/NotifyServer")]
        System.Threading.Tasks.Task NotifyServerAsync(string clientAddress);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/UpdateData")]
        void UpdateData(string functionList, string machineKey);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/UpdateData")]
        System.Threading.Tasks.Task UpdateDataAsync(string functionList, string machineKey);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/CallBackFunction")]
        void CallBackFunction(string str);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : DataCenterConsoleApp.DuplexEMachineService.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.DuplexClientBase<DataCenterConsoleApp.DuplexEMachineService.IService>, DataCenterConsoleApp.DuplexEMachineService.IService {
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void NormalFunction() {
            base.Channel.NormalFunction();
        }
        
        public System.Threading.Tasks.Task NormalFunctionAsync() {
            return base.Channel.NormalFunctionAsync();
        }
        
        public void InsertData(string macineKey) {
            base.Channel.InsertData(macineKey);
        }
        
        public System.Threading.Tasks.Task InsertDataAsync(string macineKey) {
            return base.Channel.InsertDataAsync(macineKey);
        }
        
        public void NotifyServer(string clientAddress) {
            base.Channel.NotifyServer(clientAddress);
        }
        
        public System.Threading.Tasks.Task NotifyServerAsync(string clientAddress) {
            return base.Channel.NotifyServerAsync(clientAddress);
        }
        
        public void UpdateData(string functionList, string machineKey) {
            base.Channel.UpdateData(functionList, machineKey);
        }
        
        public System.Threading.Tasks.Task UpdateDataAsync(string functionList, string machineKey) {
            return base.Channel.UpdateDataAsync(functionList, machineKey);
        }
    }
}
